


# temp.groを読み込み
import ase.io

class make_cpmdinput():
     # pseudo potentialの辞書を作成．
     pseudo = {}
     pseudo["O"]="O_SG_BLYP"
     pseudo["H"]="H_SG_BLYP"
     pseudo["C"]="C_SG_BLYP"
     
     def __init__(self, ase_atoms,max_step:float=10000):
         # get supercell size
         # * hard code : simple cubic only !!
         cell_parameter=ase_atoms.get_cell()[0][0] # 00の対角成分をとる．
         self.ase_atoms=ase_atoms

         self.lines_georelax='''
   &INFO
   input generated by dieltools
   Bulk .
   --------
   Functional : GGA (?)
   &END
         
   &CPMD
   OPTIMIZE GEOMETRY XYZ
   FILEPATH
         ./tmp         
   CONVERGENCE GEOMETRY
         1.0e-2
   CONVERGENCE ORBITALS
         1.0e-7
   PRINT FORCES ON
   MAXSTEP
         10000
   VDW CORRECTION ON
   &END
         
   &SYSTEM
   !! type of symmetry
   !1 Simple CUBIC 2 FACE CENTERED CUBIC (FCC) 3 BODY CENTERED CUBIC (BCC) 4 HEXAGONAL 5 TRIGONAL or RHOMBOHEDRAL 6 TETRAGONAL 7 BODY CENTRED TETRAGONAL (BCT) 8 ORTHORHOMBIC 12 MONOCLINIC 14 TRICLINIC
   SYMMETRY
         1
   ANGSTROM
   CELL
         {0:.10f} 1.0 1.0  0.0  0.0  0.0
   CUTOFF
         100.0
   &END
         
   &DFT
         FUNCTIONAL BLYP
   &END
         
   &VDW
   EMPIRICAL CORRECTION
         VDW PARAMETERS
         ALL DFT-D2
   END EMPIRICAL CORRECTION
   &END
         
   &ATOMS
   '''.format(cell_parameter)

         self.lines_bomd_wan='''
 &INFO
  input generated by dieltools :: bomd+wf calculation
  Bulk .
  --------
  Functional : GGA (?)
 &END
 &CPMD
  MOLECULAR DYNAMICS BO
  RESTART WAVEFUNCTION COORDINATES LATEST
        
  TRAJECTORY XYZ FORCES
     
  FILEPATH
   ./tmp
         
  TEMPERATURE
   300.0D0
         
  BERENDSEN IONS
   300.0D0 10000
         
  MAXSTEP
   {0}
  TIMESTEP
   40.0
  PRINT FORCES ON
  RATTLE
   100 1e-6
  VDW CORRECTION ON
      
  ! -------- WANNIER ---------
       
  DIPOLE DYNAMICS WANNIER SAMPLE
   1
      
  ! SD,JACOBI,SVD
   WANNIER OPTIMIZATION JACOBI
         
         ! W STEP, W EPS, W RAN, W MAXS
         WANNIER PARAMETER
         0.1 1e-7 0.0 2000
         &END
         
         &SYSTEM
         !! type of symmetry
         !1 Simple CUBIC 2 FACE CENTERED CUBIC (FCC) 3 BODY CENTERED CUBIC (BCC) 4 HEXAGONAL 5 TRIGONAL or RHOMBOHEDRAL 6 TETRAGONAL 7 BODY CENTRED TETRAGONAL (BCT) 8 ORTHORHOMBIC 12 MONOCLINIC 14 TRICLINIC
         SYMMETRY
         1
         ANGSTROM
         CELL
         {1:.10f} 1.0 1.0  0.0  0.0  0.0

         CUTOFF
         100.0
         &END
         
         &DFT
         FUNCTIONAL BLYP
         &END
         
         &VDW
         EMPIRICAL CORRECTION
         VDW PARAMETERS
         ALL DFT-D2
         END EMPIRICAL CORRECTION
         &END

         &ATOMS
         '''.format(max_step,cell_parameter)
         

         # CPMDでは，原子種類ごとに
         '''
         *pseudo/O_SG_BLYP KLEINMAN-BYLANDER
         LMAX=P
         32
         '''
         # みたいなのが必要．ということで，indexが入れ替わるごとに数が必要．
         
         # 連続する同じ原子種のリストを作成
         number_index= []
         pre_index=""
         counter=1
         for i,index in enumerate(self.ase_atoms.get_chemical_symbols()):
             if i == 0:
                 continue
             if i == len(self.ase_atoms.get_chemical_symbols())-1: #最後の原子種
                 counter = counter + 1
                 number_index.append(counter)
             if index == pre_index:
                 counter = counter+1
             elif index != pre_index:
                 number_index.append(counter) # 一つ前の原子種の数をappend
                 counter = 1 # リセット
             pre_index = index

         # わかりやすいようにnumber_indexの形を整える．
         new_index=[]
         for i in number_index:
             for j in range(i):
                 new_index.append(i)
         # print(new_index)
         self.new_index=new_index


     def make_georelax(self):
          # 
          filename_georelax="georelax.inp"

          f_georelax=open(filename_georelax,mode="w")
          f_georelax.write(self.lines_georelax)

          # 最終的な出力を作成．
          self.write_coordinates(f_georelax) # 座標を出力
          f_georelax.write("&END")
          f_georelax.close()
          return 0

     
     def make_bomd(self):
          # 
          filename_bomd="bomd-wan.inp"

          f_bomd=open(filename_bomd,mode="w")
          f_bomd.write(self.lines_bomd_wan)
          self.write_coordinates(f_bomd) # 座標を出力
          f_bomd.write("&END \n")
          f_bomd.close()
          return 0

     def write_coordinates(self,file):
          # 最終的な出力を作成．
          ase_atoms_position=self.ase_atoms.get_positions()
          pre_index=""
          for i,index in enumerate(self.ase_atoms.get_chemical_symbols()):
               if index != pre_index:
                    file.write("\n")
                    file.write("*pseudo/{0} KLEINMAN-BYLANDER \n".format(self.pseudo[index]))
                    file.write("   LMAX=P \n")
                    file.write("   {0} \n".format(self.new_index[i]))
               file.write( " {0:.10f} {1:.10f} {2:.10f} \n".format(ase_atoms_position[i][0],ase_atoms_position[i][1],ase_atoms_position[i][2]))
               pre_index = index
          return 0
          
