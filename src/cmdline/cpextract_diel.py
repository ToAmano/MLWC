#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""cpextract_diel.py
CPextract.py diel subcommand for processing dipole.txt files generated by dieltools

- histgram :: Plot histgram of molecule dipole/bond dipole
"""


#
# simple code to extract data from CP.x outputs
# define sub command of CPextract.py
#

import sys
import numpy as np
import argparse
import matplotlib.pyplot as plt
import cpmd.read_core
import cpmd.read_traj

try:
    import ase.units
except ImportError:
    sys.exit("Error: ase not installed")



class Plot_histgram:
    """plot histgram of molecule/bond dipole
    

    Returns:
        _type_: _description_
    """
    def __init__(self,dipole_filename):
        self.__filename = dipole_filename
        import os
        if not os.path.isfile(self.__filename):
            print(" ERROR (Plot_histgram) :: "+str(self.__filename)+" does not exist !!")
            print(" ")
            return 1
        self.data = np.loadtxt(self.__filename) # load txt in numpy ndarray
        print(" --------- ")
        print(f" number of data :: {np.shape(self.data)}")
        print(" --------- ")
    
    def get_histgram(self):
        """ヒストグラムのデータを保存
        
        """
        import pandas as pd
        # 先にデータの数と値域から最適なヒストグラム構成を考える
        # TODO :: bins = 1000で固定しているので修正
        _length = len(self.data)
        
        # 最大値を計算する
        plot_data = np.linalg.norm(self.data[:,2:].reshape(-1,3),axis=1)
        _max_val = np.max(plot_data)
        # 最大値が4以下なら5で固定する
        if _max_val < 4:
            _hist_max_val = 5
        else:
            _hist_max_val = _max_val+2
        
        
        # https://qiita.com/nkay/items/56bda7143981e3d5303f
        df =pd.DataFrame()
        hist = np.histogram(plot_data, bins = 1000, range = [0,_hist_max_val], density=True )
        df["dipole"] = (hist[1][1:] + hist[1][:-1]) / 2
        df["density"] = hist[0] 
        df.to_csv(self.__filename+"_hist.txt")
        return df


    
    def plot_dipole_histgram(self):
        """make histgram&plot histgram

        Returns:
            _type_: _description_
        """
        print(" ---------- ")
        print(" dipole histgram plot ")
        print(" ---------- ")
        plot_data = np.linalg.norm(self.data[:,2:].reshape(-1,3),axis=1)
        fig, ax = plt.subplots(figsize=(8,5),tight_layout=True) # figure, axesオブジェクトを作成
        ax.hist(plot_data, bins = 1000, density=True)     # 描画
        
        # 各要素で設定したい文字列の取得
        xticklabels = ax.get_xticklabels()
        yticklabels = ax.get_yticklabels()
        xlabel="Timestep" #"Time $\mathrm{ps}$"
        ylabel="Energy[eV]"
        
        # 各要素の設定を行うsetコマンド
        ax.set_xlabel(xlabel,fontsize=22)
        ax.set_ylabel(ylabel,fontsize=22)
        
        # https://www.delftstack.com/ja/howto/matplotlib/how-to-set-tick-labels-font-size-in-matplotlib/#ax.tick_paramsaxis-xlabelsize-%25E3%2581%25A7%25E7%259B%25AE%25E7%259B%259B%25E3%2582%258A%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B
        ax.tick_params(axis='x', labelsize=15 )
        ax.tick_params(axis='y', labelsize=15 )
        
        ax.legend(loc="upper right",fontsize=15 )
        
        #pyplot.savefig("eps_real2.pdf",transparent=True) 
        # plt.show()
        fig.savefig(self.__filename+"_dipolehist.pdf")
        fig.delaxes(ax)
        return 0

class Plot_totaldipole:
    """plot time vs dipole figure for total_dipole
    
    Returns:
        _type_: _description_
    """
    def __init__(self,dipole_filename):
        self.__filename = dipole_filename
        import os
        if not os.path.isfile(self.__filename):
            print(" ERROR (Plot_histgram) :: "+str(self.__filename)+" does not exist !!")
            print(" ")
            return 1
        self.data = np.loadtxt(self.__filename) # load txt in numpy ndarray
        print(" --------- ")
        print(f" number of data :: {np.shape(self.data)}")
        print(" --------- ")
        self.__get_timestep()
        print(" ---------- ")
        print(f"timestep [fs] :: {self.timestep}")
        print(" ---------- ")
        self.__get_temperature()
        print(" ---------- ")
        print(f"timestep [K] :: {self.temperature}")
        print(" ---------- ")
        self.__get_unitcell()
        print(" ---------- ")
        print(f"timestep [K] :: {self.unitcell}")
        print(" ---------- ")

    def __get_timestep(self)->int:
        """extract timestep from total_dipole.txt
        """
        with open(self.__filename) as f:
            line = f.readline()
            while line:
                line = f.readline()
                if line.startswith("#TIMESTEP"):
                    time = float(line.split(" ")[1]) 
                    break
        self.timestep = time
        return 0
    
    def __get_unitcell(self):
        """extract unitcell from total_dipole.txt
        """
        with open(self.__filename) as f:
            line = f.readline()
            while line:
                line = f.readline()
                if line.startswith("#UNITCELL"):
                    unitcell = line.strip("\n").split(" ")[1:]
                    break
        self.unitcell = np.array([float(i) for i in unitcell]).reshape([3,3]) 
        return 0
    
    def __get_temperature(self):
        """extract unitcell from total_dipole.txt
        """
        with open(self.__filename) as f:
            line = f.readline()
            while line:
                line = f.readline()
                if line.startswith("#TEMPERATURE"):
                    temp = float(line.split(" ")[1]) 
                    break
        self.temperature = temp
        return 0
    
    def calc_dielectric_spectrum(self,eps_n2:float):
        from ml.acf_fourier import dielec
        from cpmd.dipole_core import diel_function
        process = dielec(self.unitcell, self.temperature, self.timestep)
        rfreq, ffteps1, ffteps2 = process.calc_fourier(self.data[:,1:], eps_n2, "hann") # calc dielectric function
        # 
        diel = diel_function(rfreq, ffteps1, ffteps2)
        diel.diel_df.to_csv(self.__filename+"_diel.csv")
        diel.refractive_df.to_csv(self.__filename+"_refractive.csv")
        return 0
        
        
    
    def plot_total_dipole(self):
        """make histgram&plot histgram

        Returns:
            _type_: _description_
        """
        print(" ---------- ")
        print(" dipole histgram plot ")
        print(" ---------- ")
        fig, ax = plt.subplots(figsize=(8,5),tight_layout=True) # figure, axesオブジェクトを作成
        ax.plot(self.data[:,0], self.data[:,1], label = "x")     # 描画
        ax.plot(self.data[:,0], self.data[:,2], label = "x")     # 描画
        ax.plot(self.data[:,0], self.data[:,3], label = "x")     # 描画

        
        # 各要素で設定したい文字列の取得
        xticklabels = ax.get_xticklabels()
        yticklabels = ax.get_yticklabels()
        xlabel="Timestep" #"Time $\mathrm{ps}$"
        ylabel="Dipole [D]"
        
        # 各要素の設定を行うsetコマンド
        ax.set_xlabel(xlabel,fontsize=22)
        ax.set_ylabel(ylabel,fontsize=22)
        
        # https://www.delftstack.com/ja/howto/matplotlib/how-to-set-tick-labels-font-size-in-matplotlib/#ax.tick_paramsaxis-xlabelsize-%25E3%2581%25A7%25E7%259B%25AE%25E7%259B%259B%25E3%2582%258A%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B
        ax.tick_params(axis='x', labelsize=15 )
        ax.tick_params(axis='y', labelsize=15 )
        
        ax.legend(loc="upper right",fontsize=15 )
        
        #pyplot.savefig("eps_real2.pdf",transparent=True) 
        # plt.show()
        fig.savefig(self.__filename+"_time_dipole.pdf")
        fig.delaxes(ax)
        return 0



# --------------------------------
# 以下CPextract.pyからロードする関数たち
# --------------------------------

def command_diel_histgram(args):
    EVP=Plot_histgram(args.Filename)
    EVP.get_histgram()
    EVP.plot_dipole_histgram()
    return 0

def command_diel_total(args):
    EVP=Plot_totaldipole(args.Filename)
    EVP.plot_total_dipole()
    return 0

def command_diel_spectra(args):
    EVP=Plot_totaldipole(args.Filename)
    EVP.calc_dielectric_spectrum(args.eps)  
    return 0