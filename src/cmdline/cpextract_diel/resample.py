import pandas as pd
import numpy as np
import argparse
import os
import datetime
import __version__
from include.mlwc_logger import root_logger
logger = root_logger(__name__)

class resample_diel:
    def __init__(self,input_filename:str,num:int):
        self.input_filename = input_filename
        self.num = num
    
    def read_file(self):
        if not os.path.exists(self.input_filename):
            raise FileNotFoundError(f"{self.input_filename} not found")
        return pd.read_csv(self.input_filename,comment="#")
    
    @classmethod
    def resample_diel(cls,df:pd.DataFrame,num:int):

        # 例のデータフレーム（'frequency', 'epsilon_real', 'epsilon_fit' などのカラムを持つ）
        # df = pd.read_csv("20241005_mean5_oh_ft.csv")
        if "freq_kayser" not in df.columns:
            raise ValueError("freq_kayser is not in columns")
        # keep only positive frequencies (for logaritmic sampling)
        df = df[df['freq_kayser'] > 0]
        # 振動数のログ値を計算
        # df['log_freq'] = np.log10(df['freq_kayser'])
        df.loc[:, 'log_freq'] = np.log10(df['freq_kayser'])

        # ログスケールで等間隔にサンプリング
        log_freq_samples = np.linspace(df['log_freq'].min(), df['log_freq'].max(), num)
        
        sampled_rows = []
        # 各サンプリングポイントに最も近い元のデータを取得
        for log_freq in log_freq_samples:
            closest_idx = (df['log_freq'] - log_freq).abs().idxmin()
            # print(closest_idx)
            sampled_rows.append(df.loc[closest_idx])

        # print(sampled_rows)
        # リストからデータフレームを作成
        sampled_df = pd.DataFrame()
        sampled_df = pd.concat(sampled_rows, axis=1).T

        # 不要なカラムを削除
        sampled_df = sampled_df.drop(columns=['log_freq'])
        sampled_df = sampled_df.drop_duplicates(subset='freq_kayser')
        return sampled_df
    
    def save_file(self, df:pd.DataFrame):
        """
        処理結果をファイルCに保存するメソッド。結果をCSVファイルとして保存。
        """
        output_filename:str = self.input_filename+f"_resample_{self.num}.csv"
        if os.path.exists(output_filename):
            raise FileExistsError(f"{output_filename} already exists")
        # df.to_csv(self.output_file, index=False)
        with open(output_filename, 'a') as f:
            # 現在の日時を取得
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # コメント行を追加
            f.write(f'# File created on: {current_time}\n')
            f.write(f'# File generated by CPextract.py diel resample version {__version__.__version__}.\n')
            f.write(f'# Parameters: num={self.num}, filename={self.input_filename}\n')
            f.write('# Data below:\n')
            df.to_csv(f,index=False)
        print(f"Results saved to {output_filename}")
        
        
    def execute(self):
        """
        一連の流れを実行するメソッド。ファイル読み込み、処理、保存を行う。
        """
        df:pd.DataFrame = self.read_file()
        df:pd.DataFrame = self.resample_diel(df,self.num)
        self.save_file(df)



def command_diel_resample(args:argparse.Namespace):
    processor = resample_diel(args.Filename, int(args.num))
    processor.execute()
    return 0